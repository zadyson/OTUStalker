/*
 * Copyright (c) 2015, Z. A. Dyson (zadyson@gmail.com) & L. B. M. Speirs
 * Last updated May 27 2015
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
/**
 * my.outstalkergui is a GUI version of the program OTUStalker designed for
 * filtering PCR amplicon data by organism of interest.
 */
package my.otustalkergui;

import java.awt.Component;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 * OTUStalkerGUI - Graphical User Interface (GUI) version of OTUStalker a
 * program designed to filter PCR amplicon data by organism
 *
 * @author Z. A. Dyson & L. B. M. Speirs
 * @version 0.0.1
 *
 */
public class OTUStalkerGUI_UI extends javax.swing.JFrame {

    private static Component frame;
    boolean filesSelected = false;
    File workingDirectory;

    /**
     * Creates new form OTUStalkerGUI_UI for GUI for OTUStalker program
     */
    public OTUStalkerGUI_UI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButtonCancelOTUSTalker = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jLabel11 = new javax.swing.JLabel();
        jToolBar1 = new javax.swing.JToolBar();
        jButtonRunOTUStalker = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldOrganism = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaOTUStalkerOutput = new javax.swing.JTextArea();
        jTextFieldTaxAssign = new javax.swing.JTextField();
        jButtonTaxAssign = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        jProgressBar = new javax.swing.JProgressBar();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jTextFieldOTUList = new javax.swing.JTextField();
        label1 = new java.awt.Label();
        jButtonOTUList = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jTextFieldDeMulSeq = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jTextFieldReadData = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jTextFieldReadScores = new javax.swing.JTextField();
        jButtonDeMulSeq = new javax.swing.JButton();
        jButtonReadData = new javax.swing.JButton();
        jButtonReadScores = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel10 = new javax.swing.JLabel();
        jTextFieldOutputDir = new javax.swing.JTextField();
        jButtonOutputDir = new javax.swing.JButton();
        jButtonQuit = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        jTextFieldRepSeq = new javax.swing.JTextField();
        jButtonRepSeq = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();

        jButton1.setText("jButton1");

        jButtonCancelOTUSTalker.setText("Cancel");
        jButtonCancelOTUSTalker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelOTUSTalkerActionPerformed(evt);
            }
        });

        jScrollPane2.setViewportView(jTextPane1);

        jLabel11.setText("Time elapsed during run:");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("OTUStalker ");
        setResizable(false);

        jToolBar1.setRollover(true);

        jButtonRunOTUStalker.setText("Start OTUStalking");
        jButtonRunOTUStalker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRunOTUStalkerActionPerformed(evt);
            }
        });

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("Organism of interest   ");
        jLabel1.setToolTipText("A single nominated taxonomic group of interest. Query term is not case sensitive.");

        jTextFieldOrganism.setText("e.g. Chloroflexi");
        jTextFieldOrganism.setToolTipText("A single nominated taxonomic group of interest. Query term is not case sensitive.");
        jTextFieldOrganism.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldOrganismActionPerformed(evt);
            }
        });

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Taxonomic Assignment file   ");
        jLabel2.setToolTipText("<html>This text file contains a line for each OTU created.<br>  Each line then lists an OTU identifier followed by <br> its taxonomic assignment. This file<br>  (eg: seqs_rep_set_tax_assignments.txt) is<br>  generated by the script “assign_taxonomy.py”.</html>");

        jTextAreaOTUStalkerOutput.setColumns(20);
        jTextAreaOTUStalkerOutput.setRows(5);
        jTextAreaOTUStalkerOutput.setText("Awaiting organism and file information...");
        jTextAreaOTUStalkerOutput.setAutoscrolls(false);
        jScrollPane1.setViewportView(jTextAreaOTUStalkerOutput);

        jTextFieldTaxAssign.setText("e.g. seqs_rep_set_tax_assignments.txt");
        jTextFieldTaxAssign.setToolTipText("<html>This text file contains a line for each OTU created.<br>\n Each line then lists an OTU identifier followed by <br>\nits taxonomic assignment. This file<br>\n (eg: seqs_rep_set_tax_assignments.txt) is<br>\n generated by the script “assign_taxonomy.py”.</html>");
        jTextFieldTaxAssign.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldTaxAssignActionPerformed(evt);
            }
        });

        jButtonTaxAssign.setText("Select");
        jButtonTaxAssign.setToolTipText("<html>This text file contains a line for each OTU created.<br>  Each line then lists an OTU identifier followed by <br> its taxonomic assignment. This file<br>  (eg: seqs_rep_set_tax_assignments.txt) is<br>  generated by the script “assign_taxonomy.py”.</html>");
        jButtonTaxAssign.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTaxAssignActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel3.setText("OTUStalker Run Status:");

        jProgressBar.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jProgressBar.setStringPainted(true);

        jLabel4.setText("Progress");

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("OTU Sequence List file   ");

        jTextFieldOTUList.setText("e.g. seqs_otus.txt");
        jTextFieldOTUList.setToolTipText("<html>\nThis file contains a list of all the representative OTU <br> \nidentifiers and the corresponding individual sequences <br>\nthat contribute to each. This file is generated by the script <br>\n“pick_de_novo_otus.py” (or one of the alternative OTU<br>\npicking methods).");

        label1.setText("Demultiplexed sequences file");

        jButtonOTUList.setText("Select");
        jButtonOTUList.setToolTipText("<html>\nThis file contains a list of all the representative OTU <br> \nidentifiers and the corresponding individual sequences <br>\nthat contribute to each. This file is generated by the script <br>\n“pick_de_novo_otus.py” (or one of the alternative OTU<br>\npicking methods).");
        jButtonOTUList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOTUListActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel6.setText("Select your files, and enter the name of your organism of intestet below:");

        jTextFieldDeMulSeq.setText("e.g. seqs.fna");
        jTextFieldDeMulSeq.setToolTipText("<html>\nThe script “split_libraries.py” will parse and rename <br> \neach read provided by the sequencing platform, with  <br> \nthe appropriate Sample ID, therefore formatting the  <br> \nsequence data for downstream analysis. This script  <br> \ngenerates a file with the default name “seqs.fna”.");

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("Read data file   ");

        jTextFieldReadData.setText("e.g. HYPIJKO01.fna");
        jTextFieldReadData.setToolTipText("<html>\nThis is the pyrosequencing platform generated <br> \nFASTA file (eg: ABCD.fna). The amplicon processing  <br> \nsoftware attached to the pyrosequencing platform will  <br>\ngenerate one of these files for each region of the PTP plate. ");
        jTextFieldReadData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldReadDataActionPerformed(evt);
            }
        });

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setText("Read quality scores file   ");

        jTextFieldReadScores.setText("e.g. HYPIJKO01.qual");
        jTextFieldReadScores.setToolTipText("<html>\nThis is the pyrosequencing platform generated <br>\nquality score file (eg: ABCD.qual), which contains<br>\na quality score for each base of each sequence<br>\nincluded in the FASTA (ie: ABCD.fna) file. Like the <br>\nfasta file mentioned above, the amplicon processing <br>\nsoftware will generate one of these files for each <br>\nregion of the PTP plate.");

        jButtonDeMulSeq.setText("Select");
        jButtonDeMulSeq.setToolTipText("<html>\nThe script “split_libraries.py” will parse and rename <br> \neach read provided by the sequencing platform, with  <br> \nthe appropriate Sample ID, therefore formatting the  <br> \nsequence data for downstream analysis. This script  <br> \ngenerates a file with the default name “seqs.fna”.");
        jButtonDeMulSeq.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeMulSeqActionPerformed(evt);
            }
        });

        jButtonReadData.setText("Select");
        jButtonReadData.setToolTipText("<html>\nThis is the pyrosequencing platform generated <br> \nFASTA file (eg: ABCD.fna). The amplicon processing  <br> \nsoftware attached to the pyrosequencing platform will  <br>\ngenerate one of these files for each region of the PTP plate. ");
        jButtonReadData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonReadDataActionPerformed(evt);
            }
        });

        jButtonReadScores.setText("Select");
        jButtonReadScores.setToolTipText("<html>\nThis is the pyrosequencing platform generated <br>\nquality score file (eg: ABCD.qual), which contains<br>\na quality score for each base of each sequence<br>\nincluded in the FASTA (ie: ABCD.fna) file. Like the <br>\nfasta file mentioned above, the amplicon processing <br>\nsoftware will generate one of these files for each <br>\nregion of the PTP plate.");
        jButtonReadScores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonReadScoresActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel9.setText("Welcome to OTUStalker, a program designed to filter PCR amplicon data by organism!");

        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel10.setText("Output directory   ");
        jLabel10.setToolTipText("File path nominated by the OTUStalker user.");

        jTextFieldOutputDir.setText("e.g. /home/speirs_dyson/putmydatahere/");
        jTextFieldOutputDir.setToolTipText("File path nominated by the OTUStalker user.");
        jTextFieldOutputDir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldOutputDirActionPerformed(evt);
            }
        });

        jButtonOutputDir.setText("Select");
        jButtonOutputDir.setToolTipText("File path nominated by the OTUStalker user");
        jButtonOutputDir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOutputDirActionPerformed(evt);
            }
        });

        jButtonQuit.setText("Quit");
        jButtonQuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonQuitActionPerformed(evt);
            }
        });

        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel12.setText("Representative sequences file");

        jTextFieldRepSeq.setText("e.g. seqs_rep_set.fasta");
        jTextFieldRepSeq.setToolTipText("<html>\nThis file is created by the “pick_rep_set.py”.<br>\nIt is a FASTA file containing one sequence per <br>\nOTU. The default name of the output file will <br>\nbe (input_sequences_filepath)_rep_set.fasta.");
        jTextFieldRepSeq.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldRepSeqActionPerformed(evt);
            }
        });

        jButtonRepSeq.setText("Select");
        jButtonRepSeq.setToolTipText("<html>\nThis file is created by the “pick_rep_set.py”.<br>\nIt is a FASTA file containing one sequence per <br>\nOTU. The default name of the output file will <br>\nbe (input_sequences_filepath)_rep_set.fasta.");
        jButtonRepSeq.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRepSeqActionPerformed(evt);
            }
        });
        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator2)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 498, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addComponent(jLabel2))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(54, 54, 54)
                                .addComponent(jLabel5)
                                .addGap(327, 327, 327)
                                .addComponent(jButtonOTUList))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(62, 62, 62)
                                .addComponent(jLabel1)
                                .addGap(0, 0, 0)
                                .addComponent(jTextFieldOrganism, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(87, 87, 87)
                                .addComponent(jLabel10)
                                .addGap(0, 0, 0)
                                .addComponent(jTextFieldOutputDir, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(3, 3, 3)
                                .addComponent(jButtonOutputDir)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addGap(6, 6, 6))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(jProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jButtonRunOTUStalker)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jButtonQuit))
                                    .addComponent(jLabel3))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(6, 6, 6))))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jTextFieldTaxAssign, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(3, 3, 3)
                    .addComponent(jButtonTaxAssign))
                .addGroup(layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jTextFieldOTUList, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(103, 103, 103)
                                    .addComponent(jLabel7))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(42, 42, 42)
                                    .addComponent(jLabel8)))
                            .addGap(0, 0, 0)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jTextFieldDeMulSeq, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jTextFieldReadData)
                                .addComponent(jTextFieldReadScores, javax.swing.GroupLayout.DEFAULT_SIZE, 322, Short.MAX_VALUE)))
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel12)
                                    .addGap(0, 2, Short.MAX_VALUE)
                                    .addComponent(jTextFieldRepSeq, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(3, 3, 3)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jButtonReadData)
                                .addComponent(jButtonDeMulSeq)
                                .addComponent(jButtonReadScores)))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(3, 3, 3)
                            .addComponent(jButtonRepSeq)))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel9)
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addGap(14, 14, 14)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextFieldOrganism, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldOutputDir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(jButtonOutputDir))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextFieldTaxAssign, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonTaxAssign))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldRepSeq, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12)
                    .addComponent(jButtonRepSeq))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonOTUList)
                    .addComponent(jTextFieldOTUList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextFieldDeMulSeq, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonDeMulSeq))
                    .addComponent(label1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldReadData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonReadData)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldReadScores, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonReadScores)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonRunOTUStalker)
                    .addComponent(jButtonQuit))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        label1.getAccessibleContext().setAccessibleName("Select file 3");

        pack();
    }// </editor-fold>                        


    private void jButtonRunOTUStalkerActionPerformed(java.awt.event.ActionEvent evt) {                                                     
        new Thread(new otustalkerthread1()).start();
        jButtonRunOTUStalker.setEnabled(false);
    }                                                    


    private void jButtonTaxAssignActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        JFileChooser taxAssignChooser = new JFileChooser();
        if (filesSelected == true) {
            taxAssignChooser.setCurrentDirectory(workingDirectory);
        }
        taxAssignChooser.showOpenDialog(null);
        File taxAssignFile = taxAssignChooser.getSelectedFile();
        if (taxAssignFile != null) {
            String taxAssignFilename = taxAssignFile.getAbsolutePath();
            workingDirectory = taxAssignChooser.getCurrentDirectory();
            jTextFieldTaxAssign.setText(taxAssignFilename);
            filesSelected = true;
        }
    }                                                

    private void jButtonCancelOTUSTalkerActionPerformed(java.awt.event.ActionEvent evt) {                                                        

    }                                                       

    private void jTextFieldOrganismActionPerformed(java.awt.event.ActionEvent evt) {                                                   

    }                                                  

    private void jButtonDeMulSeqActionPerformed(java.awt.event.ActionEvent evt) {                                                
        JFileChooser deMulSeqChooser = new JFileChooser();
        if (filesSelected == true) {
            deMulSeqChooser.setCurrentDirectory(workingDirectory);
        }
        deMulSeqChooser.showOpenDialog(null);
        File deMulSeqFile = deMulSeqChooser.getSelectedFile();
        if (deMulSeqFile != null) {
            String deMulSeqFilename = deMulSeqFile.getAbsolutePath();
            workingDirectory = deMulSeqChooser.getCurrentDirectory();
            jTextFieldDeMulSeq.setText(deMulSeqFilename);
            filesSelected = true;
        }
    }                                               

    private void jTextFieldReadDataActionPerformed(java.awt.event.ActionEvent evt) {                                                   

    }                                                  

    private void jTextFieldTaxAssignActionPerformed(java.awt.event.ActionEvent evt) {                                                    

    }                                                   

    private void jButtonOTUListActionPerformed(java.awt.event.ActionEvent evt) {                                               
        JFileChooser otuListChooser = new JFileChooser();
        if (filesSelected == true) {
            otuListChooser.setCurrentDirectory(workingDirectory);
        }
        otuListChooser.showOpenDialog(null);
        File otuListFile = otuListChooser.getSelectedFile();
        if (otuListFile != null) {
            String otuListFilename = otuListFile.getAbsolutePath();
            workingDirectory = otuListChooser.getCurrentDirectory();
            jTextFieldOTUList.setText(otuListFilename);
            filesSelected = true;
        }
    }                                              

    private void jButtonReadScoresActionPerformed(java.awt.event.ActionEvent evt) {                                                  
        JFileChooser readScoresChooser = new JFileChooser();
        if (filesSelected == true) {
            readScoresChooser.setCurrentDirectory(workingDirectory);
        }
        readScoresChooser.showOpenDialog(null);
        File readScoresFile = readScoresChooser.getSelectedFile();
        if (readScoresFile != null) {
            String readScoresFilename = readScoresFile.getAbsolutePath();
            workingDirectory = readScoresChooser.getCurrentDirectory();
            jTextFieldReadScores.setText(readScoresFilename);
            filesSelected = true;
        }
    }                                                 

    private void jButtonOutputDirActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        JFileChooser outputDirectoryChooser = new JFileChooser();
        if (filesSelected == true) {
            outputDirectoryChooser.setCurrentDirectory(workingDirectory);
        }
        outputDirectoryChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        outputDirectoryChooser.setAcceptAllFileFilterUsed(false);
        outputDirectoryChooser.showOpenDialog(null);
        File outputDirectoryFile = outputDirectoryChooser.getSelectedFile();
        if (outputDirectoryFile != null) {
            String outputDirectoryFilename = outputDirectoryFile.getAbsolutePath();
            workingDirectory = outputDirectoryChooser.getCurrentDirectory();
            jTextFieldOutputDir.setText(outputDirectoryFilename);
            filesSelected = true;
        }
    }                                                

    private void jTextFieldOutputDirActionPerformed(java.awt.event.ActionEvent evt) {                                                    

    }                                                   

    private void jButtonQuitActionPerformed(java.awt.event.ActionEvent evt) {                                            
        System.exit(0);
    }                                           

    private void jButtonReadDataActionPerformed(java.awt.event.ActionEvent evt) {                                                
        JFileChooser readDataChooser = new JFileChooser();
        if (filesSelected == true) {
            readDataChooser.setCurrentDirectory(workingDirectory);
        }
        readDataChooser.showOpenDialog(null);
        File readDataFile = readDataChooser.getSelectedFile();
        if (readDataFile != null) {
            String readDataFilename = readDataFile.getAbsolutePath();
            workingDirectory = readDataChooser.getCurrentDirectory();
            jTextFieldReadData.setText(readDataFilename);
            filesSelected = true;
        }
    }                                               

    private void jButtonRepSeqActionPerformed(java.awt.event.ActionEvent evt) {                                              
        JFileChooser repSeqChooser = new JFileChooser();
        if (filesSelected == true) {
            repSeqChooser.setCurrentDirectory(workingDirectory);
        }
        repSeqChooser.showOpenDialog(null);
        File repSeqFile = repSeqChooser.getSelectedFile();
        if (repSeqFile != null) {
            String repSeqFilename = repSeqFile.getAbsolutePath();
            workingDirectory = repSeqChooser.getCurrentDirectory();
            jTextFieldRepSeq.setText(repSeqFilename);
            filesSelected = true;
        }
    }                                             

    private void jTextFieldRepSeqActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        // TODO add your handling code here:
    }                                                

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OTUStalkerGUI_UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OTUStalkerGUI_UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OTUStalkerGUI_UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OTUStalkerGUI_UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new OTUStalkerGUI_UI().setVisible(true);
            }
        });
    }

    /**
     * Retrieve the OTU numbers, and proportion of the organism of interest
     * present, and number of representative sequences from the input data files
     *
     * @param outputDate Date of OTUStalker run
     * @param searchOrganism the organism of interest, will be searched case
     * independently
     * @param repSet filename of taxonomic assignments file
     * @param repSeq filename of the representative sequences file
     * @param outputDir location of output directory selected by user
     *
     * @return finalResults total number of organisms, number of organism of
     * interest, and the number of OTU representative sequences retrieved
     */
    public static int[] getOrganismOTUNumsAndRepSeqs(
            String outputDate, String searchOrganism, String repSet,
            String repSeq, String outputDir) {

        //Initialize variables
        int organismCount = 0;
        int totalOrganismCount = 0;
        int seqMatchCount = 0;
        String taxassignments;

        try {

            //Open data files
            BufferedReader speciesDataIn = new BufferedReader(
                    new FileReader(repSet));

            //Create output files
            PrintWriter taxAssignDataOut = new PrintWriter(
                    new FileWriter(outputDir + outputDate
                            + "_" + searchOrganism + "_Output/"
                            + searchOrganism + "TaxAssignData.txt"));
            PrintWriter repOTUListOut = new PrintWriter(
                    new FileWriter(outputDir + outputDate + "_"
                            + searchOrganism + "_Output/"
                            + searchOrganism + "OTUNumbers.txt"));
            PrintWriter repSeqDataOut = new PrintWriter(
                    new FileWriter(outputDir + outputDate
                            + "_" + searchOrganism + "_Output/All"
                            + searchOrganism + "RepOTUs.fasta"));

            //While there are new entries in the data file, keep screening
            while ((taxassignments = speciesDataIn.readLine()) != null) {

                totalOrganismCount++;

                //Delimit file for screening
                String splitarray[] = taxassignments.split("\t");
                String taxassignotunumber = splitarray[0];
                String secondentry = splitarray[1];

                /*regular expression to search organism name regardless of lower
                 or upper case*/
                boolean chloroflexiMatch = false;
                
                if (secondentry.matches("(?i).*" + "_" + searchOrganism + ";" + ".*") || secondentry.matches("(?i).*" + "_" + searchOrganism)) {
                    chloroflexiMatch = true;
                };

                /*If the entry corresponds to the desired organism append
                 the entry to the output file and obtain representative sequence
                 data and output data*/
                if (chloroflexiMatch) {

                    organismCount++;

                    /*Output taxonomic data and OTU numbers pertaining to the
                     organism of interest*/
                    taxAssignDataOut.println(taxassignments);
                    repOTUListOut.println(taxassignotunumber);

                    //Initalize variable for looping
                    String newToken;
                    boolean seqFound = false;

                    /* Open representative sequences data file and
                     retrieve relevant data */
                    Scanner repSeqIn = new Scanner(
                            new File(repSeq));
                    repSeqIn.useDelimiter(">");
                    StringBuffer tokenAdder = new StringBuffer();

                    while (repSeqIn.hasNext() && !seqFound) {
                        tokenAdder.append(repSeqIn.next());
                        newToken = tokenAdder.toString();
                        String splitarray2[] = newToken.split(" ");
                        String repfileotunumber = splitarray2[0];
                        if (repfileotunumber.matches(taxassignotunumber)) {
                            seqMatchCount++;
                            repSeqDataOut.append(
                                    ">" + tokenAdder.toString());
                            seqFound = true;
                        }
                        tokenAdder.delete(0, tokenAdder.length());
                    }
                    //Close scanner
                    repSeqIn.close();
                }
            }

            //Close files
            repOTUListOut.close();
            repSeqDataOut.close();
            taxAssignDataOut.close();
            speciesDataIn.close();

            //Exception handling
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(frame,
                    "Taxonomic assignment or representative sequences "
                    + "\nfiles not found, or output directory not selected"
                    + "\nplease check these and try again.");
        } catch (ArrayIndexOutOfBoundsException ex) {
            JOptionPane.showMessageDialog(frame,
                    "Taxonimic assignment or representative sequences input"
                    + " \nfile(s) format is not correct, please check file"
                    + " format and try again.");
        }

        int[] finalResults = new int[]{
            totalOrganismCount, organismCount, seqMatchCount};

        return finalResults;
    }

    /**
     * Retrieve sequence names for all OTUs pertaining to organism of interest
     *
     * @param outputDate Date of OTUStalker run
     * @param searchOrganism the organism of interest, will be searched case
     * independently
     * @param seqsOTUs filename of OTU sequence list file
     * @param outputDir location of output directory selected by user
     *
     * @return finalResults the number of matched OTUs, and the number of
     * sequence names retrieved
     */
    public static int[] getOTUSequenceNames(
            String outputDate, String searchOrganism,
            String seqsOTUs, String outputDir) {

        //Initialize variables and data structures
        int matchedOTUCount = 0;
        int countSeqNamesListed = 0;
        PrintWriter sequenceNamesOut;

        try {

            //Open data files and initialize output files
            BufferedReader otuSequenceListIn = new BufferedReader(
                    new FileReader(seqsOTUs));
            String otuSequenceList;

            sequenceNamesOut = new PrintWriter(
                    new FileWriter(outputDir + outputDate + "_"
                            + searchOrganism + "_Output/"
                            + searchOrganism + "SequenceNames.txt"));

            //While there are new entries in the data file, keep screening
            while ((otuSequenceList = otuSequenceListIn.readLine()) != null) {

                //Boolean for exiting while loop when a sequence name is located
                boolean otuFound = false;

                //Delimit the current entry by tab
                String splitarray[] = otuSequenceList.split("\t");
                String otuNumber = splitarray[0];

                //Open data file
                BufferedReader otuListIn = new BufferedReader(
                        new FileReader(
                                outputDir + outputDate + "_" + searchOrganism
                                + "_Output/" + searchOrganism
                                + "OTUNumbers.txt"));

                String otuListEntry;

                //Read through list of selected OTU numbers and attempt to match
                //to the current entry in the seqs_otus data file
                while ((otuListEntry = otuListIn.readLine()) != null
                        && !otuFound) {

                    //If a match is found, output to data file and exit while loop
                    if (otuListEntry.matches(otuNumber)) {
                        matchedOTUCount++;
                        otuFound = true;

                        //Add all matching sequence names to the data file
                        int endOfArray = splitarray.length;
                        countSeqNamesListed = countSeqNamesListed
                                + (endOfArray - 1);
                        for (int i = 1; i < endOfArray; i++) {
                            sequenceNamesOut.println(splitarray[i]);
                        }
                    }
                }

            }
            //close files
            sequenceNamesOut.close();
            otuSequenceListIn.close();

            //Exception handling
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(frame,
                    "OTU Sequence List input file not found,\n"
                    + "or output directory not selected"
                    + "\nplease check these and try again.");
        } catch (ArrayIndexOutOfBoundsException ex) {
            JOptionPane.showMessageDialog(frame,
                    "OTU Sequence List input file format is not "
                    + "\ncorrect, please check file format and try again.");
        }

        int[] finalResults = new int[]{matchedOTUCount, countSeqNamesListed};

        return finalResults;
    }

    /**
     * Retrieve all read names pertaining to organism of interest
     *
     * @param outputDate date of OTUStalker run
     * @param searchOrganism organism of interest
     * @param deMulSeq filename of demultiplexed sequences file
     * @param outputDir location of output directory selected by user
     * @return matchCount number of OTU numbers matched
     */
    public static int getAllOTUReadNumbers(
            String outputDate, String searchOrganism,
            String deMulSeq, String outputDir) {

        //Initialize counter
        int matchCount = 0;

        try {
            //Initialize output files
            PrintWriter otuSequenceDataOut = new PrintWriter(
                    new FileWriter(outputDir + outputDate
                            + "_" + searchOrganism + "_Output/All"
                            + searchOrganism + "OTUSequenceDataSEQS.fasta"));
            PrintWriter otuSequenceReadTagsOut = new PrintWriter(
                    new FileWriter(outputDir + outputDate + "_"
                            + searchOrganism + "_Output/All"
                            + searchOrganism + "OTUReadNumbers.txt"));

            //Open file seqs.fna and delimit entries by sequence
            Scanner scanner2 = new Scanner(new File(deMulSeq));
            scanner2.useDelimiter(">");

            //While there are more entries in the data file, keep screening
            while (scanner2.hasNext()) {
                String newToken = scanner2.next().toString();
                /* Boolean to allow exiting of loop when a match is found*/
                Boolean sequenceFound = false;

                //Select the read number from the entry
                String scanner2Text = newToken;
                String splitarray[] = scanner2Text.split("\n");
                String firstentry = splitarray[0];
                String splitarray2[] = firstentry.split(" ");
                String firstentry2 = splitarray2[0];
                String firstentry3 = splitarray2[1];

                //Open data file
                BufferedReader sequenceNamesIn = new BufferedReader(
                        new FileReader(
                                outputDir + outputDate + "_" + searchOrganism
                                + "_Output/" + searchOrganism
                                + "SequenceNames.txt"));

                String nextTag;

                /*While a match hasn't been found and there are more entries
                 in the data file keep reading the file*/
                while ((nextTag = sequenceNamesIn.readLine()) != null
                        && !sequenceFound) {
                    /*If a matching sequence name is found add the sequence
                     data and the read number to their respective data files*/
                    if (nextTag.matches(firstentry2)) {
                        matchCount++;
                        sequenceFound = true;
                        //Append new data to output files
                        otuSequenceDataOut.println(">" + scanner2Text);
                        otuSequenceReadTagsOut.println("" + firstentry3);
                    }
                }
                //Close file
                sequenceNamesIn.close();

            }

            //Close files
            otuSequenceDataOut.close();
            otuSequenceReadTagsOut.close();
            scanner2.close();

            //Exception handling
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(frame,
                    "Demultiplexed sequenced input file not found,\n"
                    + "or output directory not selected"
                    + "\nplease check these and try again.");
        } catch (ArrayIndexOutOfBoundsException ex) {
            JOptionPane.showMessageDialog(frame,
                    "Demultiplexed input file format is not "
                    + "\ncorrect, please check file format and try again.");
        }

        return matchCount;
    }

    /**
     * Retrieve all reads pertaining to the organism of interest and split the
     * data by sample
     *
     * @param outputDate date of OTUStalker run
     * @param searchOrganism organism of interest
     * @param fnaFile filename of the read data file
     * @param outputDir location of output directory selected by user
     * @return finalResults the sample names and the number of samples present
     * in the sequence data
     */
    public static ArrayList[] getAllOTUSequences(String outputDate,
            String searchOrganism, String fnaFile,
            String outputDir) {

        //Initialize variables and data structures
        int newSampleNum = 1;
        ArrayList sampleNames = new ArrayList();
        ArrayList numSamples = new ArrayList();
        ArrayList[] finalResults = new ArrayList[]{sampleNames, numSamples};

        try {

            //initialize variables and data structures
            Boolean found = false;
            int matchCount = 0;
            Scanner scanner;

            //Create output directory and files
            new File(outputDir + outputDate + "_" + searchOrganism
                    + "_Output/All_"
                    + searchOrganism).mkdirs();
            PrintWriter otuSequenceDataOut = new PrintWriter(
                    new FileWriter(outputDir + outputDate
                            + "_" + searchOrganism + "_Output/All_"
                            + searchOrganism + "/All" + searchOrganism
                            + "Seqs.fna"));

            //Open data files and delimit by sequence
            scanner = new Scanner(new File(fnaFile));
            scanner.useDelimiter(">");

            //While new entries are present in data file, keep screening
            while (scanner.hasNext()) {
                /*Boolean to exit nested while loop when a relevant sequence
                 is found */
                Boolean sequenceFound = false;

                //Select the read number from the entry
                String scannerText = scanner.next().toString();
                String splitarray[] = scannerText.split(" ");
                String qualreadtag = splitarray[0];

                //Open data file and delimit by sequence
                Scanner tagReader = new Scanner(new File(
                        outputDir + outputDate + "_"
                        + searchOrganism + "_Output/All"
                        + searchOrganism + "OTUSequenceDataSeqs.fasta"));
                tagReader.useDelimiter(">");

                /*While there are still entries in the data file and no matching
                 sequence has been found, keep screening the file*/
                while ((tagReader.hasNext()) && !sequenceFound) {

                    String line = tagReader.next().toString();
                    String splitarray1[] = line.split(" ");
                    String nexttag = splitarray1[1];
                    String sampleNameSplit[] = splitarray1[0].split("_");
                    String sampleName = sampleNameSplit[0];

                    /*If two matching read numbers are found append the
                     sequence data to the data files and also split by sample*/
                    if (nexttag.matches(qualreadtag)) {
                        if (nexttag.matches(qualreadtag)) {
                            new File(outputDir + outputDate + "_"
                                    + searchOrganism + "_Output/"
                                    + sampleName + "_"
                                    + searchOrganism).mkdirs();
                            String sampleSeqName = outputDir + outputDate
                                    + "_" + searchOrganism
                                    + "_Output/" + sampleName + "_"
                                    + searchOrganism
                                    + "/" + sampleName + "_" + searchOrganism
                                    + "SeqData.fna";
                            File sampleSeq = new File(sampleSeqName);
                            if (sampleNames.isEmpty()) {
                                sampleNames.add(sampleName);
                                numSamples.add(newSampleNum);
                            } else {
                                for (int i = 0; i < sampleNames.size(); i++) {
                                    String currSampleName = (sampleNames.get(
                                            i)).toString();
                                    if (currSampleName.matches(sampleName)) {
                                        found = true;
                                        int currNumSamples = Integer.parseInt(
                                                numSamples.get(i).toString());
                                        currNumSamples++;
                                        numSamples.set(i, currNumSamples);
                                    }
                                }
                                if (!found) {
                                    sampleNames.add(sampleName);
                                    numSamples.add(newSampleNum);
                                } else {
                                    found = false;
                                }
                            }
                            if (sampleSeq.isFile() && sampleSeq.canRead()) {
                                try (PrintWriter sampleSeqOut = new PrintWriter(
                                        new FileWriter(sampleSeqName, true))) {
                                    sampleSeqOut.println(">" + scannerText);
                                }
                            } else {
                                try (PrintWriter sampleSeqOut = new PrintWriter(
                                        new FileWriter(sampleSeqName))) {
                                    sampleSeqOut.println(">" + scannerText);
                                }
                            }
                            matchCount++;
                            sequenceFound = true;
                            otuSequenceDataOut.print(">" + scannerText);
                        }
                    }
                }
                //close file
                tagReader.close();
            }
            //close files
            scanner.close();
            otuSequenceDataOut.close();

            //Exception handling
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(frame,
                    "Read data input file not found,\n"
                    + "or output directory not selected"
                    + "\nplease check these and try again.");
        } catch (ArrayIndexOutOfBoundsException ex) {
            JOptionPane.showMessageDialog(frame,
                    "Read data input file format is not "
                    + "\ncorrect, please check file format and try again.");
        }

        return finalResults;
    }

    /**
     * Retrieve all reads quality scores pertaining to the organism of interest
     * reads and split the data by sample
     *
     * @param outputDate date of OTUStalker run
     * @param searchOrganism organism of interest
     * @param qualFile filename of the read quality score data file
     * @param outputDir location of output directory selected by user
     * @return finalResults sample names and the number of samples present in
     * the sequence data
     */
    public static ArrayList[] getQualityScores(
            String outputDate, String searchOrganism,
            String qualFile, String outputDir) {

        //Initialize variables and data structures
        int newSampleNum = 1;
        ArrayList sampleNames = new ArrayList();
        ArrayList numSamples = new ArrayList();
        ArrayList[] finalResults = new ArrayList[]{sampleNames, numSamples};

        try {

            //Initialize variables
            Boolean found = false;
            int matchCount = 0;
            int scanCount = 0;
            int listCount = 0;

            //Create output data files
            PrintWriter readQualityScores = new PrintWriter(
                    new FileWriter(outputDir + outputDate + "_"
                            + searchOrganism + "_Output/All_"
                            + searchOrganism + "/All" + searchOrganism + "Seqs.qual"));

            //Open data files and delimit by sequence
            Scanner scanner = new Scanner(new File(qualFile));
            scanner.useDelimiter(">");

            //While there are still new entries in the file, keep screening
            while (scanner.hasNext()) {
                //Boolean to to exit the loop when a match is found
                Boolean matchFound = false;
                String scannerText = scanner.next().toString();

                //retrieve read tag from first line of quality score file
                String splitarray[] = scannerText.split(" ");
                String qualreadtag = splitarray[0];
                scanCount++;

                //Open data file and delimit by sequence
                Scanner listReadTagsIn = new Scanner(new File(
                        outputDir + outputDate + "_"
                        + searchOrganism + "_Output/All"
                        + searchOrganism + "OTUSequenceDataSEQS.fasta"));

                listReadTagsIn.useDelimiter(">");

                /*Screen the list of read numbers from the selected OTUs
                 and check for a match in the quality score file, exit the loop
                 and close the file if a match is found*/
                while ((listReadTagsIn.hasNext()) && !matchFound) {

                    listCount++;

                    //Obtain read number
                    String line = listReadTagsIn.next().toString();
                    String splitarray1[] = line.split(" ");
                    String nextreadtag = splitarray1[1];
                    String sampleNameSplit[] = splitarray1[0].split("_");
                    String sampleName = sampleNameSplit[0];

                    /*If the read number corresponds to a read that is known to
                     be a member of one of the selected OTUs, add the quality
                     score data to the output files and split by sample*/
                    if (nextreadtag.matches(qualreadtag)) {
                        String sampleSeqName = outputDir + outputDate + "_"
                                + searchOrganism + "_Output/" + sampleName + "_"
                                + searchOrganism + "/" + sampleName + "_"
                                + searchOrganism + "SeqData.qual";
                        File sampleQual = new File(sampleSeqName);
                        if (sampleNames.isEmpty()) {
                            sampleNames.add(sampleName);
                            numSamples.add(newSampleNum);
                        } else {
                            for (int i = 0; i < sampleNames.size(); i++) {
                                String currSampleName = (sampleNames.get(
                                        i)).toString();
                                if (currSampleName.matches(sampleName)) {
                                    found = true;
                                    int currNumSamples = Integer.parseInt(
                                            numSamples.get(i).toString());
                                    currNumSamples++;
                                    numSamples.set(i, currNumSamples);
                                }
                            }
                            if (!found) {
                                sampleNames.add(sampleName);
                                numSamples.add(newSampleNum);
                            } else {
                                found = false;
                            }
                        }
                        if (sampleQual.isFile() && sampleQual.canRead()) {
                            try (PrintWriter sampleQualOut = new PrintWriter(
                                    new FileWriter(sampleSeqName, true))) {
                                sampleQualOut.println(">" + scannerText);
                            }
                        } else {
                            try (PrintWriter sampleQualOut = new PrintWriter(
                                    new FileWriter(sampleSeqName))) {
                                sampleQualOut.println(">" + scannerText);
                            }
                        }
                        matchFound = true;
                        matchCount++;
                        readQualityScores.print(">" + scannerText);
                    }
                }

                //close file
                listReadTagsIn.close();
            }

            //close files
            scanner.close();
            readQualityScores.close();

            //Exception handling
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(frame,
                    "Read quality scores input file not found,\n"
                    + "or output directory not selected"
                    + "\nplease check these and try again.");
        } catch (ArrayIndexOutOfBoundsException ex) {
            JOptionPane.showMessageDialog(frame,
                    "Read quality scores input file format is not "
                    + "\ncorrect, please check file format and try again.");
        }

        return finalResults;
    }

    /**
     * Delete temporary files created by OTUStalker run
     *
     * @param outputDate date of OTUStalker run
     * @param searchOrganism organism of interest
     *
     */
    public static void cleanUpTempFiles(
            String outputDate, String searchOrganism) {
        try {

            //retrieve files by run date/time and organism name
            File file1 = new File(outputDate + "_" + searchOrganism
                    + "_Output/All"
                    + searchOrganism + "OTUReadNumbers.txt");
            File file2 = new File(outputDate + "_" + searchOrganism
                    + "_Output/"
                    + searchOrganism + "OTUNumbers.txt");
            File file3 = new File(outputDate + "_" + searchOrganism
                    + "_Output/"
                    + searchOrganism + "SequenceNames.txt");
            File file4 = new File(outputDate + "_" + searchOrganism
                    + "_Output/All"
                    + searchOrganism + "OTUSequenceDataSEQS.fasta");

            //delete files
            file1.delete();
            file2.delete();
            file3.delete();
            file4.delete();

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(frame,
                    "An error was encountered when deleting temporary files.");

        }

    }

    /**
     * otustalkerthread1 - calls OTUStalker methods to filter 16S data using
     * input from user using GUI and directs progress\output back to GUI
     *
     * @author Z. A. Dyson & L. B. M. Speirs
     * @version 0.0.1
     *
     */
    public class otustalkerthread1 implements Runnable {

        @Override
        public void run() {

            //obtain user input data from form
            String searchOrganism = jTextFieldOrganism.getText();
            String repSet = jTextFieldTaxAssign.getText();
            String seqsOTUs = jTextFieldOTUList.getText();
            String deMulSeq = jTextFieldDeMulSeq.getText();
            String repSeq = jTextFieldRepSeq.getText();
            String fnaFile = jTextFieldReadData.getText();
            String qualFile = jTextFieldReadScores.getText();
            String outputDir = jTextFieldOutputDir.getText() + "/";

            //Set progress bar to zero and indeterminate
            jProgressBar.setValue(0);
            jProgressBar.setIndeterminate(true);

            //redirect system output ot jTextArea and scroll to bottom
            PrintStream otuStalkerOutput = new PrintStream(
                    new TextAreaOutputStream(jTextAreaOTUStalkerOutput));
            jTextAreaOTUStalkerOutput.selectAll();
            jTextAreaOTUStalkerOutput.select(
                    jTextAreaOTUStalkerOutput.getSelectionEnd(),
                    jTextAreaOTUStalkerOutput.getSelectionEnd());
            System.setOut(otuStalkerOutput);
            System.setErr(otuStalkerOutput);

            //Set date/time stamp for log file and file names
            Date date = new Date();
            SimpleDateFormat dateFormat = new SimpleDateFormat(
                    "yyyy-MM-dd_HH.mm");
            String outputDate = dateFormat.format(date);

            //Create output directory
            new File(outputDir + outputDate + "_"
                    + searchOrganism + "_Output").mkdirs();
            try {
                PrintWriter log = new PrintWriter(
                        new FileWriter(outputDir + outputDate + "_" + searchOrganism
                                + "_Output/" + searchOrganism + "log.txt"));
                Date startDate = new Date();

                //Print start time to screen
                System.out.println("\n---\nOTUStalker run initiated on "
                        + startDate + "\n");

                //Run stage 1, print output, and update progress bar
                int repData[] = getOrganismOTUNumsAndRepSeqs(
                        outputDate, searchOrganism, repSet, repSeq, outputDir);

                System.out.println("Out of " + repData[0] + " total organisms, "
                        + repData[1] + " " + searchOrganism + " were found and "
                        + repData[2] + " OTU sequences were retrieved.");
                System.out.println("Stage 1 of 5 complete. \n");
                otuStalkerOutput.flush();
                jTextAreaOTUStalkerOutput.selectAll();
                jTextAreaOTUStalkerOutput.select(
                        jTextAreaOTUStalkerOutput.getSelectionEnd(),
                        jTextAreaOTUStalkerOutput.getSelectionEnd());
                jProgressBar.setValue(20);

                //If stage 1 fails print error message
                if (repData[1] == 0 | repData[2] == 0) {
                    JOptionPane.showMessageDialog(
                            frame, "OTUStalker was unable to further process "
                            + "your \ndata as either the organism was absent "
                            + "from the taxonomic \nassignments file, or no "
                            + "representative sequences were found.");
                    jProgressBar.setIndeterminate(false);
                    Date currDate = new Date();
                    System.out.println("\nOTUStalker Run Aborted at " + currDate);
                    jTextAreaOTUStalkerOutput.selectAll();
                    jTextAreaOTUStalkerOutput.select(
                            jTextAreaOTUStalkerOutput.getSelectionEnd(),
                            jTextAreaOTUStalkerOutput.getSelectionEnd());
                    log.write(
                            jTextAreaOTUStalkerOutput.getText());
                    jButtonRunOTUStalker.setEnabled(true);
                } else {

                    //Run stage 2 and print output
                    int seqNameData[] = getOTUSequenceNames(
                            outputDate, searchOrganism, seqsOTUs, outputDir);

                    System.out.println(seqNameData[0] + " OTUs matched, and "
                            + seqNameData[1]
                            + " corresponding sequence names retrieved.");

                    //If stage 2 fails print error message
                    if (repData[1] != seqNameData[0]) {
                        JOptionPane.showMessageDialog(
                                frame, "Error: mismatch between number of the \n"
                                + "selected organism and the number of OTUs "
                                + "matched. \nThis indicates an issue with the "
                                + "data file(s).");
                        jProgressBar.setIndeterminate(false);
                        Date currDate = new Date();
                        System.out.println("\nOTUStalker Run Aborted at "
                                + currDate);
                        jTextAreaOTUStalkerOutput.selectAll();
                        jTextAreaOTUStalkerOutput.select(
                                jTextAreaOTUStalkerOutput.getSelectionEnd(),
                                jTextAreaOTUStalkerOutput.getSelectionEnd());
                        log.write(
                                jTextAreaOTUStalkerOutput.getText());
                        jButtonRunOTUStalker.setEnabled(true);
                    } else {
                        //Print stage 2 output and update progress bar
                        System.out.println("Stage 2 of 5 complete. \n");
                        otuStalkerOutput.flush();
                        jTextAreaOTUStalkerOutput.selectAll();
                        jTextAreaOTUStalkerOutput.select(
                                jTextAreaOTUStalkerOutput.getSelectionEnd(),
                                jTextAreaOTUStalkerOutput.getSelectionEnd());;
                        jProgressBar.setValue(40);

                        //Run stage 3 and print output
                        int numReads = getAllOTUReadNumbers(
                                outputDate, searchOrganism, deMulSeq, outputDir);
                        System.out.println(
                                numReads
                                + " corresponding read numbers retrieved.");

                        //If stage 3 fails, print error message
                        if (seqNameData[1] != numReads) {
                            JOptionPane.showMessageDialog(
                                    frame, "Error: mismatch between number of "
                                    + "reads \nretrieved and number of read names"
                                    + " indicating a problem \n"
                                    + "with the data file(s).");
                            jProgressBar.setIndeterminate(false);
                            Date currDate = new Date();
                            System.out.println("\nOTUStalker Run Aborted at "
                                    + currDate);
                            jTextAreaOTUStalkerOutput.selectAll();
                            jTextAreaOTUStalkerOutput.select(
                                    jTextAreaOTUStalkerOutput.getSelectionEnd(),
                                    jTextAreaOTUStalkerOutput.getSelectionEnd());
                            log.write(
                                    jTextAreaOTUStalkerOutput.getText());
                            jButtonRunOTUStalker.setEnabled(true);
                        } else {
                            //Print stage 3 output and update progress bar
                            System.out.println("Stage 3 of 5 complete. \n");
                            jProgressBar.setValue(60);
                            otuStalkerOutput.flush();
                            jTextAreaOTUStalkerOutput.selectAll();
                            jTextAreaOTUStalkerOutput.select(
                                    jTextAreaOTUStalkerOutput.getSelectionEnd(),
                                    jTextAreaOTUStalkerOutput.getSelectionEnd());

                            //Run stage 4 and print output
                            ArrayList numOTUSeqs[] = getAllOTUSequences(
                                    outputDate, searchOrganism, fnaFile,
                                    outputDir);
                            int sampleAdder = 0;
                            System.out.println(searchOrganism + " found in "
                                    + numOTUSeqs[0].size() + " samples.");
                            for (int j = 0; j < numOTUSeqs[0].size(); j++) {
                                System.out.println("Sample " + numOTUSeqs[0].get(
                                        j).toString() + " contained "
                                        + numOTUSeqs[1].get(j).toString()
                                        + " sequence(s).");
                                sampleAdder += Integer.parseInt(
                                        numOTUSeqs[1].get(j).toString());
                            }
                            System.out.println(
                                    sampleAdder
                                    + " corresponding sequences retrieved.");

                            //If stage 4 fails print error message
                            if (numReads != sampleAdder) {
                                JOptionPane.showMessageDialog(
                                        frame, "Error: mismatch bewteen number "
                                        + "of \nreads and number of OTU sequences"
                                        + " retrieved \nindicating a problem with"
                                        + " the data file(s).");
                                jProgressBar.setIndeterminate(false);
                                System.out.println(searchOrganism + " found in "
                                        + numOTUSeqs[0].size() + " samples.");
                                Date currDate = new Date();
                                System.out.println(
                                        "\nOTUStalker Run Aborted at "
                                        + currDate);
                                jTextAreaOTUStalkerOutput.selectAll();
                                jTextAreaOTUStalkerOutput.select(
                                        jTextAreaOTUStalkerOutput
                                        .getSelectionEnd(),
                                        jTextAreaOTUStalkerOutput
                                        .getSelectionEnd());
                                log.write(
                                        jTextAreaOTUStalkerOutput.getText());
                                jButtonRunOTUStalker.setEnabled(true);
                            } else {
                                //Print output and update progress bar
                                System.out.println("Stage 4 of 5 complete. \n");
                                otuStalkerOutput.flush();
                                jTextAreaOTUStalkerOutput.selectAll();
                                jTextAreaOTUStalkerOutput.select(
                                        jTextAreaOTUStalkerOutput.
                                        getSelectionEnd(),
                                        jTextAreaOTUStalkerOutput.
                                        getSelectionEnd());
                                jProgressBar.setValue(80);

                                //Run stage 5 and print output
                                ArrayList numQualScores[] = getQualityScores(
                                        outputDate, searchOrganism, qualFile,
                                        outputDir);
                                System.out.println(searchOrganism + " found in "
                                        + numQualScores[0].size() + " samples.");
                                int qualSampleAdder = 0;
                                for (int j = 0; j < numQualScores[0]
                                        .size(); j++) {
                                    System.out.println("Sample "
                                            + numQualScores[0].get(j).toString()
                                            + " contained "
                                            + numQualScores[1].get(j).toString()
                                            + " sequence(s).");
                                    qualSampleAdder += Integer.parseInt(
                                            numQualScores[1].get(j).toString());
                                }
                                if (qualSampleAdder == numReads) {
                                    System.out.println(
                                            sampleAdder
                                            + " corresponding quality scores"
                                            + " retrieved.");
                                }
                                //If stage 5 fails print error message
                                if (numQualScores[1].size()
                                        != numOTUSeqs[1].size()) {
                                    JOptionPane.showMessageDialog(
                                            frame, "Error: number of samples "
                                            + "does not correspond\nwith"
                                            + " the numver of OTU sequences "
                                            + "retrieved");
                                    jProgressBar.setIndeterminate(false);
                                    Date currDate = new Date();
                                    System.out.println(
                                            "\nOTUStalker Run Aborted at "
                                            + currDate);
                                    jTextAreaOTUStalkerOutput.selectAll();
                                    jTextAreaOTUStalkerOutput.select(
                                            jTextAreaOTUStalkerOutput
                                            .getSelectionEnd(),
                                            jTextAreaOTUStalkerOutput
                                            .getSelectionEnd());
                                    log.write(
                                            jTextAreaOTUStalkerOutput.getText());
                                    jButtonRunOTUStalker.setEnabled(true);
                                }
                                if (qualSampleAdder != sampleAdder) {
                                    JOptionPane.showMessageDialog(
                                            frame, "Error: mismatch between "
                                            + "sequences\n and number of quality"
                                            + " scores retrieved \nindicating a "
                                            + "problem with the data file(s).");
                                    jProgressBar.setIndeterminate(false);
                                    Date currDate = new Date();
                                    System.out.println(
                                            "\nOTUStalker Run Aborted at "
                                            + currDate);
                                    jTextAreaOTUStalkerOutput.selectAll();
                                    jTextAreaOTUStalkerOutput.select(
                                            jTextAreaOTUStalkerOutput
                                            .getSelectionEnd(),
                                            jTextAreaOTUStalkerOutput
                                            .getSelectionEnd());
                                    log.write(
                                            jTextAreaOTUStalkerOutput.getText());
                                    jButtonRunOTUStalker.setEnabled(true);
                                } else {
                                    //check both list arrays are the same
                                    for (int k = 0; k < numOTUSeqs[0].size(); k++) {
                                        if ((!numOTUSeqs[0].get(
                                                k).toString().matches(
                                                        numQualScores[0].get(
                                                                k).toString()))
                                                || (Integer.parseInt(
                                                        numOTUSeqs[1].get(k)
                                                        .toString())
                                                != Integer
                                                .parseInt(
                                                        numQualScores[1]
                                                        .get(k).toString()))) {
                                            JOptionPane.showMessageDialog(
                                                    frame, "Error: mismatch "
                                                    + "between sequence\n and "
                                                    + "quality score data.");
                                            jProgressBar.setIndeterminate(
                                                    false);
                                            Date currDate = new Date();
                                            System.out.println(
                                                    "\nOTUStalker Run Aborted at "
                                                    + currDate);
                                            jTextAreaOTUStalkerOutput.
                                                    selectAll();
                                            jTextAreaOTUStalkerOutput.select(
                                                    jTextAreaOTUStalkerOutput.
                                                    getSelectionEnd(),
                                                    jTextAreaOTUStalkerOutput.
                                                    getSelectionEnd());
                                            log.write(
                                                    jTextAreaOTUStalkerOutput.getText());
                                            jButtonRunOTUStalker.setEnabled(true);

                                        }
                                    }
                                    //Print output and update progress bar
                                    System.out.println(
                                            "Stage 5 of 5 complete. \n");
                                    otuStalkerOutput.flush();
                                    cleanUpTempFiles(
                                            outputDate, searchOrganism);
                                    System.out.println(
                                            "Temporary files from OTUStalker "
                                            + "run removed.");
                                    Date endDate = new Date();
                                    System.out.println(
                                            "OTUStalker run completed on "
                                            + endDate);
                                    otuStalkerOutput.flush();
                                    jTextAreaOTUStalkerOutput.selectAll();
                                    jTextAreaOTUStalkerOutput.select(
                                            jTextAreaOTUStalkerOutput.
                                            getSelectionEnd(),
                                            jTextAreaOTUStalkerOutput.
                                            getSelectionEnd());
                                    jProgressBar.setValue(100);
                                    jButtonRunOTUStalker.setEnabled(true);
                                    log.write(
                                            jTextAreaOTUStalkerOutput.getText());
                                    log.flush();
                                    jProgressBar.setIndeterminate(false);
                                }
                            }
                        }
                    }
                }
                log.close();
                //Exception handling
            } catch (Exception ex) {
                Logger.getLogger(
                        OTUStalkerGUI_UI.class.getName()).log(
                                Level.SEVERE, null, ex);
            }
        }
    }


    // Variables declaration - do not modify                     
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonCancelOTUSTalker;
    private javax.swing.JButton jButtonDeMulSeq;
    private javax.swing.JButton jButtonOTUList;
    private javax.swing.JButton jButtonOutputDir;
    private javax.swing.JButton jButtonQuit;
    private javax.swing.JButton jButtonReadData;
    private javax.swing.JButton jButtonReadScores;
    private javax.swing.JButton jButtonRepSeq;
    private javax.swing.JButton jButtonRunOTUStalker;
    private javax.swing.JButton jButtonTaxAssign;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JProgressBar jProgressBar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextArea jTextAreaOTUStalkerOutput;
    private javax.swing.JTextField jTextFieldDeMulSeq;
    private javax.swing.JTextField jTextFieldOTUList;
    private javax.swing.JTextField jTextFieldOrganism;
    private javax.swing.JTextField jTextFieldOutputDir;
    private javax.swing.JTextField jTextFieldReadData;
    private javax.swing.JTextField jTextFieldReadScores;
    private javax.swing.JTextField jTextFieldRepSeq;
    private javax.swing.JTextField jTextFieldTaxAssign;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JToolBar jToolBar1;
    private java.awt.Label label1;
    // End of variables declaration                   
}
